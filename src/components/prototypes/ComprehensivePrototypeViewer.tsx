'use client';

import React, { useState, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Copy, Download, Code, Eye, Smartphone, Monitor } from 'lucide-react';
import type { VisualPrototype } from '@/types/analysis';

interface ComprehensivePrototypeViewerProps {
  prototype: VisualPrototype | null;
  isOpen: boolean;
  onClose: () => void;
}

type TabType = 'overview' | 'before' | 'after' | 'interactive' | 'mobile' | 'code';

export function ComprehensivePrototypeViewer({
  prototype,
  isOpen,
  onClose
}: ComprehensivePrototypeViewerProps) {
  const [activeTab, setActiveTab] = useState<TabType>('overview');
  const [copiedCode, setCopiedCode] = useState<string | null>(null);
  const modalRef = useRef<HTMLDivElement>(null);
  
  if (!prototype) return null;
  
  // Handle copy to clipboard
  const copyToClipboard = async (text: string, type: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedCode(type);
      setTimeout(() => setCopiedCode(null), 2000);
      console.log('ðŸ“‹ Copied to clipboard:', type);
    } catch (error) {
      console.error('Failed to copy to clipboard:', error);
    }
  };
  
  // Generate complete code bundle for export
  const generateCodeBundle = () => {
    return {
      'improved.html': prototype.improvement.afterCode.html,
      'improved.css': prototype.improvement.afterCode.css,
      'interactive.html': prototype.improvement.interactiveDemo.html,
      'interactive.css': prototype.improvement.interactiveDemo.css,
      'interactive.js': prototype.improvement.interactiveDemo.js || '// No JavaScript required',
      'mobile.html': prototype.improvement.mobileResponsive.html,
      'mobile.css': prototype.improvement.mobileResponsive.css,
      'README.md': generateReadme()
    };
  };
  
  const generateReadme = () => `
# ${prototype.title}

## Summary
${prototype.explanation.summary}

## Key Improvements
${prototype.explanation.keyChanges.map(change => `- ${change}`).join('\n')}

## Business Impact
${prototype.explanation.businessImpact}

## Implementation Notes
${prototype.explanation.implementationNotes.map(note => `- ${note}`).join('\n')}

## Files
- \`improved.html/css\` - Main improved version
- \`interactive.html/css/js\` - Interactive demo with all states
- \`mobile.html/css\` - Mobile-optimized version

Generated by Figmant on ${new Date().toLocaleDateString()}
`;
  
  // Create iframe content with complete isolation
  const createIframeContent = (code: { html: string; css: string; js?: string }) => {
    return `
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${prototype.title} - Preview</title>
        <style>
          /* Complete CSS reset to prevent parent styles from interfering */
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }
          html, body {
            width: 100%;
            height: 100%;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #ffffff;
            line-height: 1.6;
            color: #1f2937;
            font-size: 16px;
          }
          /* Isolate the prototype content */
          .figmant-prototype-isolation {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
            background: #f8fafc;
          }
          .figmant-prototype-content {
            background: white;
            border-radius: 12px;
            padding: 24px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            max-width: 500px;
            width: 100%;
          }
          /* User's improved styles - scoped to prevent conflicts */
          .figmant-prototype-content ${code.css.replace(/([^{]+){/g, '.figmant-improved $1{')}
        </style>
      </head>
      <body>
        <div class="figmant-prototype-isolation">
          <div class="figmant-prototype-content">
            <div class="figmant-improved">
              ${code.html}
            </div>
          </div>
        </div>
        ${code.js ? `<script>${code.js}</script>` : ''}
      </body>
      </html>
    `;
  };
  
  const renderCodePreview = (code: { html: string; css: string; js?: string }, title: string) => (
    <div className="h-full flex flex-col">
      <div className="flex-shrink-0 mb-4 flex items-center justify-between">
        <h3 className="font-semibold text-lg text-gray-900">{title} Preview</h3>
        <div className="flex gap-2">
          <button
            onClick={() => copyToClipboard(createIframeContent(code), `${title}-preview`)}
            className="px-3 py-1.5 text-sm bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors flex items-center gap-2"
          >
            <Copy className="w-4 h-4" />
            {copiedCode === `${title}-preview` ? 'Copied!' : 'Copy HTML'}
          </button>
        </div>
      </div>
      <div className="flex-1">
        <iframe
          srcDoc={createIframeContent(code)}
          className="w-full h-full border border-gray-200 rounded-lg shadow-sm"
          sandbox="allow-scripts allow-same-origin"
          title={`${title} Preview`}
        />
      </div>
    </div>
  );
  
  const tabs = [
    { key: 'overview', label: 'Overview', icon: Eye },
    { key: 'before', label: 'Before', icon: Monitor },
    { key: 'after', label: 'After', icon: Monitor },
    { key: 'interactive', label: 'Interactive', icon: Monitor },
    { key: 'mobile', label: 'Mobile', icon: Smartphone },
    { key: 'code', label: 'Code', icon: Code }
  ];
  
  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          className="fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          onClick={onClose}
        >
          <motion.div
            ref={modalRef}
            className="bg-white rounded-xl max-w-7xl w-full max-h-[95vh] overflow-hidden shadow-2xl"
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.9, opacity: 0 }}
            onClick={(e) => e.stopPropagation()}
          >
            {/* Header */}
            <div className="border-b bg-gradient-to-r from-blue-50 to-purple-50 p-6">
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <h2 className="text-2xl font-bold text-gray-900 mb-2">
                    {prototype.title}
                  </h2>
                  <p className="text-gray-600 mb-3">{prototype.explanation.summary}</p>
                  
                  {/* Context Information */}
                  <div className="mb-4 p-3 bg-amber-50 border border-amber-200 rounded-lg">
                    <div className="flex items-center gap-2 mb-2">
                      <div className="w-2 h-2 bg-amber-500 rounded-full"></div>
                      <span className="text-sm font-medium text-amber-800">Applies to screen region:</span>
                    </div>
                    <p className="text-sm text-amber-700">
                      This improvement targets a {prototype.hotspot.width}Ã—{prototype.hotspot.height}px area 
                      located at position ({prototype.hotspot.x}, {prototype.hotspot.y}) on the original design. 
                      The change addresses UX issues in the {prototype.category} category.
                    </p>
                  </div>
                  
                  <div className="flex gap-2">
                    <span className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium capitalize">
                      {prototype.category}
                    </span>
                    <span className="px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm font-medium">
                      Production Ready
                    </span>
                    <span className="px-3 py-1 bg-purple-100 text-purple-800 rounded-full text-sm font-medium">
                      {prototype.hotspot.width}Ã—{prototype.hotspot.height}px
                    </span>
                  </div>
                </div>
                <button
                  onClick={onClose}
                  className="text-gray-400 hover:text-gray-600 transition-colors p-2"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
            </div>
            
            {/* Tabs */}
            <div className="border-b bg-gray-50">
              <div className="flex overflow-x-auto">
                {tabs.map(tab => {
                  const Icon = tab.icon;
                  return (
                    <button
                      key={tab.key}
                      onClick={() => setActiveTab(tab.key as TabType)}
                      className={`px-6 py-4 font-medium whitespace-nowrap transition-all duration-200 flex items-center gap-2 ${
                        activeTab === tab.key
                          ? 'text-blue-600 border-b-2 border-blue-600 bg-white'
                          : 'text-gray-600 hover:text-gray-800 hover:bg-gray-100'
                      }`}
                    >
                      <Icon className="w-4 h-4" />
                      {tab.label}
                    </button>
                  );
                })}
              </div>
            </div>
            
            {/* Content */}
            <div className="overflow-y-auto" style={{ height: 'calc(95vh - 180px)' }}>
              <div className="p-6">
                {activeTab === 'overview' && (
                  <div className="space-y-8">
                    {/* Key Improvements */}
                    <div>
                      <h3 className="text-lg font-semibold mb-4 text-gray-900">Key Improvements</h3>
                      <div className="space-y-3">
                        {prototype.explanation.keyChanges.map((change, idx) => (
                          <div key={idx} className="flex items-start gap-3 p-3 bg-green-50 rounded-lg">
                            <div className="w-6 h-6 bg-green-500 text-white rounded-full flex items-center justify-center text-sm font-bold flex-shrink-0 mt-0.5">
                              âœ“
                            </div>
                            <span className="text-gray-800">{change}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                    
                    {/* Business Impact */}
                    <div>
                      <h3 className="text-lg font-semibold mb-3 text-gray-900">Business Impact</h3>
                      <div className="p-4 bg-blue-50 rounded-lg">
                        <p className="text-gray-800 leading-relaxed">{prototype.explanation.businessImpact}</p>
                      </div>
                    </div>
                    
                    {/* Implementation Notes */}
                    <div>
                      <h3 className="text-lg font-semibold mb-3 text-gray-900">Implementation Notes</h3>
                      <div className="space-y-2">
                        {prototype.explanation.implementationNotes.map((note, idx) => (
                          <div key={idx} className="flex items-start gap-3 p-3 bg-yellow-50 rounded-lg">
                            <div className="w-5 h-5 bg-yellow-500 text-white rounded-full flex items-center justify-center text-xs font-bold flex-shrink-0 mt-1">
                              i
                            </div>
                            <span className="text-gray-700">{note}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}
                
                {activeTab === 'before' && prototype.improvement.beforeCode.html && 
                  renderCodePreview(prototype.improvement.beforeCode, 'Before')}
                {activeTab === 'after' && renderCodePreview(prototype.improvement.afterCode, 'After')}
                {activeTab === 'interactive' && renderCodePreview(prototype.improvement.interactiveDemo, 'Interactive')}
                {activeTab === 'mobile' && renderCodePreview(prototype.improvement.mobileResponsive, 'Mobile')}
                
                {activeTab === 'code' && (
                  <div className="space-y-6">
                    {/* HTML Code */}
                    <div>
                      <div className="flex items-center justify-between mb-3">
                        <h3 className="text-lg font-semibold text-gray-900">HTML</h3>
                        <button
                          onClick={() => copyToClipboard(prototype.improvement.afterCode.html, 'html')}
                          className="px-3 py-1.5 text-sm bg-green-100 text-green-700 rounded-lg hover:bg-green-200 transition-colors flex items-center gap-2"
                        >
                          <Copy className="w-4 h-4" />
                          {copiedCode === 'html' ? 'Copied!' : 'Copy HTML'}
                        </button>
                      </div>
                      <pre className="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto text-sm">
                        <code>{prototype.improvement.afterCode.html}</code>
                      </pre>
                    </div>
                    
                    {/* CSS Code */}
                    <div>
                      <div className="flex items-center justify-between mb-3">
                        <h3 className="text-lg font-semibold text-gray-900">CSS</h3>
                        <button
                          onClick={() => copyToClipboard(prototype.improvement.afterCode.css, 'css')}
                          className="px-3 py-1.5 text-sm bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors flex items-center gap-2"
                        >
                          <Copy className="w-4 h-4" />
                          {copiedCode === 'css' ? 'Copied!' : 'Copy CSS'}
                        </button>
                      </div>
                      <pre className="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto text-sm">
                        <code>{prototype.improvement.afterCode.css}</code>
                      </pre>
                    </div>
                    
                    {/* JavaScript Code (if present) */}
                    {prototype.improvement.interactiveDemo.js && (
                      <div>
                        <div className="flex items-center justify-between mb-3">
                          <h3 className="text-lg font-semibold text-gray-900">JavaScript</h3>
                          <button
                            onClick={() => copyToClipboard(prototype.improvement.interactiveDemo.js!, 'js')}
                            className="px-3 py-1.5 text-sm bg-yellow-100 text-yellow-700 rounded-lg hover:bg-yellow-200 transition-colors flex items-center gap-2"
                          >
                            <Copy className="w-4 h-4" />
                            {copiedCode === 'js' ? 'Copied!' : 'Copy JS'}
                          </button>
                        </div>
                        <pre className="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto text-sm">
                          <code>{prototype.improvement.interactiveDemo.js}</code>
                        </pre>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
            
            {/* Footer */}
            <div className="border-t bg-gray-50 p-4">
              <div className="flex justify-between items-center">
                <div className="flex gap-3">
                  <button
                    onClick={() => {
                      const bundle = generateCodeBundle();
                      copyToClipboard(Object.entries(bundle).map(([file, content]) => 
                        `=== ${file} ===\n${content}\n\n`).join(''), 'all-code');
                    }}
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
                  >
                    <Copy className="w-4 h-4" />
                    {copiedCode === 'all-code' ? 'Copied!' : 'Copy All Code'}
                  </button>
                  <button
                    onClick={() => {
                      const bundle = generateCodeBundle();
                      console.log('ðŸ“¦ Export bundle:', bundle);
                      // In a real implementation, you'd create and download a ZIP file here
                      alert('Export functionality would create a ZIP file with all code files');
                    }}
                    className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-100 transition-colors flex items-center gap-2"
                  >
                    <Download className="w-4 h-4" />
                    Export ZIP
                  </button>
                </div>
                <button
                  onClick={onClose}
                  className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
                >
                  Close
                </button>
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}